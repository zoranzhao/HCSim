//////////////////////////////////////////////////////////////////////
// C++ header file generated by SpecC V2.2.1
// Design: ambaAhb_tlm
// File:   ambaAhb_tlmOut.h
// Time:   Fri Jul 19 13:57:57 2013
//////////////////////////////////////////////////////////////////////

// Note: Notes are suppressed in this file.

// Note: Line infos are suppressed in this file.

#include <systemc>

#include "sim_config.h"
#include "Channels/global_ambaAhb.h"
#include "Channels/ambaAhb_if.h"

#ifndef SC_AMBAAHB__H
#define SC_AMBAAHB__H

namespace HCSim {
 
class AmbaAhbMacTlm
    :public sc_core::sc_channel
    ,virtual public IAmbaAhbBusMasterMacTlmProt
    ,virtual public IAmbaAhbBusSlaveMacTlmProt
    ,virtual public IAmbaAhbMacTlm_MasterSlave
{
public:
    
    AmbaAhbMacTlm(const sc_core::sc_module_name name, sc_dt::uint64 clock_period = BUS_CLOCK_PERIOD_DFLT);
    ~AmbaAhbMacTlm(void);
    sc_dt::uint64 getShortestTransferTime(unsigned int, unsigned long int, bool);
    void masterMemRead(unsigned long int, void *, unsigned long int);
    void masterMemWrite(unsigned long int, const void *, unsigned long int);
    void masterRead(unsigned long int, void *, unsigned long int);
    void masterWrite(unsigned long int, const void *, unsigned long int);
    void serve(unsigned long int, void *, unsigned long int);
    void serveRead(unsigned long int, void *, unsigned long int);
    void serveWrite(unsigned long int, void *, unsigned long int);
    void slaveRead(unsigned long int, void *, unsigned long int);
    void slaveWrite(unsigned long int, const void *, unsigned long int);
private:
    unsigned long int ADDR;
    void *DATA;
    unsigned long int LEN;
    sc_core::sc_event ack;
    sc_core::sc_event dataReady;
    bool write_flag;
    bool forward_flag; 
    sc_dt::uint64 bus_clock_period;
    
    sc_core::sc_mutex mutex;
};

class AmbaAhbBusSlaveMacLinkPass: public sc_core::sc_channel, virtual public IAmbaAhbBusSlaveMacLink
{
public:
    sc_core::sc_port<IAmbaAhbBusSlaveMacTlmProt > protWMac;
 
    AmbaAhbBusSlaveMacLinkPass()
         :sc_core::sc_module(sc_core::sc_module_name(sc_core::sc_gen_unique_name("AmbaAhbBusSlaveMacLinkPass"))) {}   
    AmbaAhbBusSlaveMacLinkPass(sc_core::sc_module_name _name)
         :sc_core::sc_module(_name) {}
    virtual ~AmbaAhbBusSlaveMacLinkPass(void) {}
    void slaveRead(unsigned long int, void *, unsigned long int);
    void slaveWrite(unsigned long int, const void *, unsigned long int);
};

class AmbaAhbBusSlaveMacMemPass: public sc_core::sc_channel, virtual public IAmbaAhbBusSlaveMacMem
{
public:
    sc_core::sc_port<IAmbaAhbBusSlaveMacTlmProt > protWMac;
    
     AmbaAhbBusSlaveMacMemPass()
         :sc_core::sc_module(sc_core::sc_module_name(sc_core::sc_gen_unique_name("AmbaAhbBusSlaveMacMemPass"))) {}
    AmbaAhbBusSlaveMacMemPass(sc_core::sc_module_name _name)
         :sc_core::sc_module(_name) {}
    virtual ~AmbaAhbBusSlaveMacMemPass(void)  {}
    
    void serve(unsigned long int, void *, unsigned long int);
    void serveRead(unsigned long int, void *, unsigned long int);
    void serveWrite(unsigned long int, void *, unsigned long int);
};

class AmbaAhbBusMasterMacLinkPass: public sc_core::sc_channel, virtual public IAmbaAhbBusMasterMacLink
{
public:
    sc_core::sc_port<IAmbaAhbBusMasterMacTlmProt > protWMac;
    
    AmbaAhbBusMasterMacLinkPass()
         :sc_core::sc_module(sc_core::sc_module_name(sc_core::sc_gen_unique_name("AmbaAhbBusMasterMacLinkPass"))) {}
    AmbaAhbBusMasterMacLinkPass(sc_core::sc_module_name _name)
         :sc_core::sc_module(_name) {}
    virtual ~AmbaAhbBusMasterMacLinkPass(void) {}
    
    void masterRead(unsigned long int, void *, unsigned long int);
    void masterWrite(unsigned long int, const void *, unsigned long int);
};

class AmbaAhbBusMasterMacMemPass: public sc_core::sc_channel, virtual public IAmbaAhbBusMasterMacMem
{
public:
    sc_core::sc_port<IAmbaAhbBusMasterMacTlmProt > protWMac;
    
    AmbaAhbBusMasterMacMemPass()
        :sc_core::sc_module(sc_core::sc_module_name(sc_core::sc_gen_unique_name("AmbaAhbBusMasterMacMemPass"))) {}
    AmbaAhbBusMasterMacMemPass(sc_core::sc_module_name _name)
        :sc_core::sc_module(_name) {}
    virtual ~AmbaAhbBusMasterMacMemPass(void) {}
    
    void masterMemRead(unsigned long int, void *, unsigned long int);
    void masterMemWrite(unsigned long int, const void *, unsigned long int);
};

class AmbaAhbMacTlm_MasterTLM_Wrap
    :public sc_core::sc_channel
    ,virtual public IAmbaAhbBusMasterMacTlmProt
{
 public:
    sc_core::sc_port< IAmbaAhbBusMasterMacTlmProt > tlm_port;

    AmbaAhbMacTlm_MasterTLM_Wrap(const sc_core::sc_module_name name)
        :sc_core::sc_module(name)
    {}
    ~AmbaAhbMacTlm_MasterTLM_Wrap() {}
    
    void masterMemRead(unsigned long int addr, void *data, unsigned long int len);
    void masterMemWrite(unsigned long int addr, const void *data, unsigned long int len);
    void masterRead(unsigned long int addr, void *data, unsigned long int len);
    void masterWrite(unsigned long int addr, const void *data, unsigned long int len);
   
 private:    
    sc_core::sc_mutex mutex;

};

} // namespace HCSim
#endif //SC_AMBAAHB__H
//////////////////////////////////////////////////////////////////////
// End of file ambaAhb_tlm.h
//////////////////////////////////////////////////////////////////////
